model
    schema 1.1

# ==============================================================================
# MULTI-TENANCY AUTHORIZATION MODEL
# ==============================================================================
#
# This model implements organisation-scoped multi-tenancy with:
# - Groups and roles scoped to organisations
# - Resources belonging to organisations
# - Fine-grained CRUD permissions with hierarchy
# - Resource-specific permission overrides
# - Dynamic custom actions per resource (generate-pdf, generate-analytics, etc.)
#
# CRITICAL: This model relies on APPLICATION-LEVEL validation to enforce
# multi-tenancy isolation. See comments on group, role, resource, and action types.
#
# Permission Hierarchy:
#   Organisation: owner → admin → resource_manager → editor → viewer
#   CRUD: can_delete → can_update → can_get → can_list
#   Actions: resource_manager, editor, or custom performers
# ==============================================================================

type user

type group
    relations
        # APPLICATION MUST: Ensure groups are assigned to their org during creation
        # Write: group:G1#organisation@organisation:ORG1 when creating group G1 in ORG1
        define organisation: [organisation]
        define member: [user, group#member]

type role
    relations
        # APPLICATION MUST: Ensure roles are assigned to their org during creation
        # Write: role:R1#organisation@organisation:ORG1 when creating role R1 in ORG1
        define organisation: [organisation]
        define assignee: [user, group#member, role#assignee]

type organisation
    relations
        define owner: [user]
        define admin: [group#member, role#assignee] or owner

        # Resource manager can manage resources (create, update, delete)
        define resource_manager: [group#member, role#assignee] or admin

        # Editor can create and update resources
        define editor: [group#member, role#assignee] or resource_manager

        # Viewer can list resources
        define viewer: [group#member, role#assignee] or editor

type resource
    relations
        # Resource belongs to an organisation
        define organisation: [organisation]

        # Resource-level role assignments (allows resource-specific permissions)
        # These can override or extend org-level defaults
        #
        # CRITICAL - APPLICATION-LEVEL VALIDATION REQUIRED:
        # The model allows direct assignment of users/groups/roles to resources,
        # but CANNOT enforce that they belong to the same organisation.
        #
        # YOUR APPLICATION MUST:
        # 1. Before writing tuples like resource:R1#editor@group:G1#member
        #    Check that: group:G1#organisation@organisation:ORG exists
        #    Where ORG is the organisation that resource R1 belongs to
        #
        # 2. Before writing tuples like resource:R1#editor@user:alice
        #    Check that: user:alice has at least viewer permission in ORG
        #    (Check: user:alice -> organisation:ORG#viewer)
        #
        # 3. Same validation applies for role#assignee assignments
        #
        # Failure to validate will break multi-tenancy isolation!
        define owner: [user] or owner from organisation
        define admin: [user, group#member, role#assignee] or admin from organisation
        define resource_manager: [user, group#member, role#assignee] or resource_manager from organisation
        define editor: [user, group#member, role#assignee] or editor from organisation
        define viewer: [user, group#member, role#assignee] or viewer from organisation

        # CRUD Operations with proper hierarchy
        # Delete is most restrictive (only owner and admin)
        define can_delete: owner or admin

        # Update is less restrictive than delete
        define can_update: can_delete or resource_manager or editor

        # Get is more restrictive than list (shows credentials and sensitive data)
        # Requires editor level or explicit grant
        # Direct assignments must belong to same org (see validation notes above)
        define can_get: [user, group#member, role#assignee] or can_update

        # List is least restrictive (shows basic info only)
        # Viewer can list resources
        define can_list: viewer or can_get

        # Create is checked at organisation level in application logic
        # (resource doesn't exist yet, so check org.editor or org.resource_manager)


type action
    relations
        # ACTION MUST: Be scoped to an organisation for multi-tenancy isolation
        # Write: action:generate-pdf#organisation@organisation:ORG1
        define organisation: [organisation]

        # ACTION MUST: Be linked to the resource it operates on
        # Write: action:res1-generate-pdf#resource@resource:res1
        define resource: [resource]

        # Action-specific performers (users, groups, or roles)
        #
        # CRITICAL - APPLICATION-LEVEL VALIDATION REQUIRED:
        # Before writing tuples like action:A1#performer@group:G1#member or @user:alice
        # YOUR APPLICATION MUST verify that the group/user belongs to the same
        # organisation as the action:
        #
        # 1. For groups: Verify group:G1#organisation@organisation:ORG exists
        #    Where ORG is the organisation of the action
        #
        # 2. For users: Verify user:alice has at least viewer permission in ORG
        #    (Check: user:alice -> organisation:ORG#viewer)
        #
        # 3. For roles: Verify role:R1#organisation@organisation:ORG exists
        #
        # Failure to validate will break multi-tenancy isolation!
        define performer: [user, group#member, role#assignee]

        # Custom actions (dynamic per resource: generate-pdf, generate-analytics, etc.)
        # Resource managers and editors of the resource can perform actions by default
        # Additional performers can be assigned at action level
        define can_perform_action: resource_manager from resource or editor from resource or performer
