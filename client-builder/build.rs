use prost_wkt_build::{FileDescriptorSet, Message};
use std::{env, fs, path::PathBuf};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let proto_root = "proto";

    // Tell cargo to rerun this build script if the proto files change
    println!("cargo:rerun-if-changed={}", proto_root);

    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
    let descriptor_path = out_dir.join("descriptors.bin");

    // Configure tonic-build with proper Google API types support
    tonic_build::configure()
        .build_server(false) // We only need the client
        .build_client(true)
        .type_attribute(".", "#[derive(serde::Serialize, serde::Deserialize)]")
        .type_attribute(".", "#[serde(rename_all = \"camelCase\")]")
        // Map Google well-known types to prost-wkt-types
        .extern_path(".google.protobuf.Timestamp", "::prost_wkt_types::Timestamp")
        .extern_path(".google.protobuf.Struct", "::prost_wkt_types::Struct")
        .extern_path(".google.protobuf.Value", "::prost_wkt_types::Value")
        .file_descriptor_set_path(&descriptor_path)
        .compile_protos(&["proto/openfga/v1/openfga_service.proto"], &["proto"])?;

    // Handle well-known types with serde support
    let descriptor_bytes = std::fs::read(descriptor_path)?;
    let descriptor = FileDescriptorSet::decode(&descriptor_bytes[..])?;
    prost_wkt_build::add_serde(out_dir.clone(), descriptor);

    // Copy generated files to openfga-client
    copy_generated_files(&out_dir)?;

    Ok(())
}

fn copy_generated_files(out_dir: &PathBuf) -> Result<(), Box<dyn std::error::Error>> {
    let openfga_client_src = PathBuf::from("../openfga-client/src");

    // Find the generated openfga.v1.rs file
    let generated_file = out_dir.join("openfga.v1.rs");
    if generated_file.exists() {
        let target_file = openfga_client_src.join("generated.rs");

        // Read the generated content
        let mut content = fs::read_to_string(&generated_file)?;

        // Add a header comment
        let header = "// This file is auto-generated by client-builder. Do not edit manually.\n// Run `cargo build -p client-builder` to regenerate.\n\n";
        content = header.to_string() + &content;

        // Write to openfga-client
        fs::write(&target_file, content)?;
        println!("Generated code copied to {:?}", target_file);
    }

    Ok(())
}
